const OpenAI = require('openai');

class OpenAIService {
    constructor() {
        
        this.apiKey = process.env.OPENAI_API_KEY 
        
        if (this.apiKey === process.env.OPENAI_API_KEY) {
            console.warn('‚ö†Ô∏è  ATEN√á√ÉO: Configure sua chave da OpenAI no arquivo .env');
        }

        this.openai = new OpenAI({
            apiKey: this.apiKey,
        });
    }

    /**
     * Detecta se a mensagem do usu√°rio √© sobre um Pok√©mon
     * @param {string} userMessage - Mensagem do usu√°rio
     * @returns {string|null} Nome do Pok√©mon detectado ou null
     */
    detectPokemonInMessage(userMessage) {
        const message = userMessage.toLowerCase();
        
        console.log(`üîç Analisando mensagem: "${message}"`);
        
        // Verificar se √© pergunta sobre tipos de Pok√©mon
        const typeKeywords = ['tipo', 'tipos', 'quais s√£o', 'lista de', 'pokemon do tipo', 'pok√©mon do tipo'];
        const hasTypeKeywords = typeKeywords.some(keyword => message.includes(keyword));
        
        if (hasTypeKeywords) {
            const typePatterns = [
                /quais s√£o os pokemon do tipo (.+)/i,
                /pokemon do tipo (.+)/i,
                /pok√©mon do tipo (.+)/i,
                /tipo (.+)/i,
                /quais pokemon s√£o (.+)/i,
                /quais pok√©mon s√£o (.+)/i,
                /lista de pokemon (.+)/i,
                /lista de pok√©mon (.+)/i
            ];

            for (const pattern of typePatterns) {
                const match = message.match(pattern);
                if (match && match[1]) {
                    const type = match[1].trim().toLowerCase();
                    console.log(`üéØ Padr√£o de tipo encontrado: "${pattern}" - Tipo extra√≠do: "${type}"`);
                    
                    // Verificar se √© um tipo v√°lido
                    if (this.isValidPokemonType(type)) {
                        console.log(`‚úÖ Tipo validado: ${type}`);
                        return { type: 'pokemon_type', value: type };
                    } else {
                        console.log(`‚ùå Tipo n√£o validado: ${type}`);
                    }
                }
            }
        }
        
        // Procurar por padr√µes como "me fale sobre", "quem √©", "informa√ß√µes sobre"
        const patterns = [
            /me fale sobre (.+)/i,
            /quem √© (.+)/i,
            /informa√ß√µes sobre (.+)/i,
            /dados do (.+)/i,
            /estat√≠sticas do (.+)/i,
            /tipo do (.+)/i,
            /habilidades do (.+)/i,
            /conte sobre (.+)/i,
            /fale sobre (.+)/i,
            /me conte sobre (.+)/i,
            /pokemon (.+)/i,
            /pok√©mon (.+)/i,
            /poke (.+)/i
        ];

        for (const pattern of patterns) {
            const match = message.match(pattern);
            if (match && match[1]) {
                const pokemonName = match[1].trim().toLowerCase();
                console.log(`üéØ Padr√£o encontrado: "${pattern}" - Nome extra√≠do: "${pokemonName}"`);
                
                // Se o nome extra√≠do parece ser um nome de Pok√©mon, retorna
                if (this.looksLikePokemonName(pokemonName)) {
                    console.log(`‚úÖ Nome validado como Pok√©mon: ${pokemonName}`);
                    return { type: 'pokemon_name', value: pokemonName };
                } else {
                    console.log(`‚ùå Nome n√£o validado: ${pokemonName}`);
                }
            }
        }

        // Se n√£o encontrou padr√µes espec√≠ficos, tenta extrair qualquer palavra que pare√ßa nome de Pok√©mon
        // Busca em todas as palavras, mas com crit√©rios mais restritivos para evitar detec√ß√µes m√∫ltiplas
        const words = message.split(/\s+/).filter(word => 
            word.length >= 4 && 
            !['sobre', 'quem', '√©', 'me', 'fale', 'conte', 'dados', 'informa√ß√µes', 'estat√≠sticas', 'tipo', 'habilidades', 'pokemon', 'pok√©mon', 'poke', 'quais', 's√£o', 'do', 'da', 'dos', 'das', 'e', 'ou', 'com', 'para', 'de', 'em', 'na', 'no', 'nas', 'nos', 'qual', 'como', 'quando', 'onde', 'porque', 'por', 'que', 'mais', 'menos', 'muito', 'pouco', 'bom', 'ruim', 'melhor', 'pior', 'forte', 'fraco', 'grande', 'pequeno', 'alto', 'baixo', 'pesado', 'leve', 'r√°pido', 'lento', 'novo', 'velho', 'jovem', 'antigo', 'primeiro', '√∫ltimo', 'pr√≥ximo', 'anterior', 'depois', 'antes', 'agora', 'hoje', 'ontem', 'amanh√£', 'sempre', 'nunca', 'talvez', 'pode', 'deve', 'precisa', 'quer', 'gosta', 'ama', 'odeia', 'tem', 'faz', 'vai', 'vem', 'fica', 'parece', 'olha', 'v√™', 'ouve', 'sente', 'pensa', 'sabe', 'entende', 'aprende', 'ensina', 'ajuda', 'trabalha', 'joga', 'brinca', 'corre', 'anda', 'voa', 'nada', 'pula', 'dorme', 'acorda', 'come', 'bebe', 'fala', 'canta', 'dan√ßa', 'ri', 'chora', 'sorri', 'grita', 'sussurra', 'pergunta', 'responde', 'explica', 'conta', 'mostra', 'esconde', 'encontra', 'perde', 'ganha', 'vence', 'empata', 'posi√ß√£o', 'posicoes', 'posicoes', 'localiza√ß√£o', 'localizacao', 'lugar', 'lugares', 'situa√ß√£o', 'situacao', 'condi√ß√£o', 'condicao', 'estado', 'estados', 'momento', 'momentos', 'tempo', 'tempos', 'vez', 'vezes', 'ocasi√£o', 'ocasiao', 'oportunidade', 'oportunidades', 'chance', 'chances', 'possibilidade', 'possibilidades', 'op√ß√£o', 'opcao', 'op√ß√µes', 'opcoes', 'escolha', 'escolhas', 'decis√£o', 'decisao', 'decis√µes', 'decisoes', 'resultado', 'resultados', 'consequ√™ncia', 'consequencia', 'consequ√™ncias', 'consequencias', 'efeito', 'efeitos', 'causa', 'causas', 'motivo', 'motivos', 'raz√£o', 'razao', 'raz√µes', 'razoes', 'explica√ß√£o', 'explicacao', 'explica√ß√µes', 'explicacoes', 'descri√ß√£o', 'descricao', 'descri√ß√µes', 'descricoes', 'defini√ß√£o', 'definicao', 'defini√ß√µes', 'definicoes', 'significado', 'significados', 'sentido', 'sentidos', 'conceito', 'conceitos', 'ideia', 'ideias', 'pensamento', 'pensamentos', 'opini√£o', 'opiniao', 'opini√µes', 'opinioes', 'vis√£o', 'visao', 'vis√µes', 'visoes', 'perspectiva', 'perspectivas', 'ponto', 'pontos', 'aspecto', 'aspectos', 'caracter√≠stica', 'caracteristica', 'caracter√≠sticas', 'caracteristicas', 'propriedade', 'propriedades', 'atributo', 'atributos', 'qualidade', 'qualidades', 'caracter', 'caracteres', 'personalidade', 'personalidades', 'comportamento', 'comportamentos', 'a√ß√£o', 'acao', 'a√ß√µes', 'acoes', 'atividade', 'atividades', 'fun√ß√£o', 'funcao', 'fun√ß√µes', 'funcoes', 'papel', 'papeis', 'responsabilidade', 'responsabilidades', 'tarefa', 'tarefas', 'objetivo', 'objetivos', 'meta', 'metas', 'finalidade', 'finalidades', 'prop√≥sito', 'proposito', 'prop√≥sitos', 'propositos', 'inten√ß√£o', 'intencao', 'inten√ß√µes', 'intencoes', 'desejo', 'desejos', 'vontade', 'vontades', 'necessidade', 'necessidades', 'requisito', 'requisitos', 'exig√™ncia', 'exigencia', 'exig√™ncias', 'exigencias', 'condi√ß√£o', 'condicao', 'condi√ß√µes', 'condicoes', 'regra', 'regras', 'lei', 'leis', 'princ√≠pio', 'principio', 'princ√≠pios', 'principios', 'base', 'bases', 'fundamento', 'fundamentos', 'origem', 'origens', 'in√≠cio', 'inicio', 'in√≠cios', 'inicios', 'come√ßo', 'comeco', 'come√ßos', 'comecos', 'fim', 'fins', 'final', 'finais', 't√©rmino', 'termino', 't√©rminos', 'terminos', 'conclus√£o', 'conclusao', 'conclus√µes', 'conclusoes', 'resumo', 'resumos', 's√≠ntese', 'sintese', 's√≠nteses', 'sinteses', 'an√°lise', 'analise', 'an√°lises', 'analises', 'estudo', 'estudos', 'pesquisa', 'pesquisas', 'investiga√ß√£o', 'investigacao', 'investiga√ß√µes', 'investigacoes', 'exame', 'exames', 'teste', 'testes', 'prova', 'provas', 'verifica√ß√£o', 'verificacao', 'verifica√ß√µes', 'verificacoes', 'confirma√ß√£o', 'confirmacao', 'confirma√ß√µes', 'confirmacoes', 'valida√ß√£o', 'validacao', 'valida√ß√µes', 'validacoes', 'aprova√ß√£o', 'aprovacao', 'aprova√ß√µes', 'aprovacoes', 'aceita√ß√£o', 'aceitacao', 'aceita√ß√µes', 'aceitacoes', 'rejei√ß√£o', 'rejeicao', 'rejei√ß√µes', 'rejeicoes', 'nega√ß√£o', 'negacao', 'nega√ß√µes', 'negacoes', 'recusa', 'recusas', 'recusa', 'recusas', 'recusa', 'recusas'].includes(word)
        );
        
        console.log(`üîç Palavras extra√≠das: ${JSON.stringify(words)}`);
        
        // Procura por Pok√©mon em todas as palavras, mas com valida√ß√£o mais rigorosa
        for (const word of words) {
            if (this.looksLikePokemonName(word)) {
                console.log(`‚úÖ Palavra validada como Pok√©mon: ${word}`);
                return { type: 'pokemon_name', value: word };
            }
        }
        
        if (words.length > 0) {
            console.log(`‚ö†Ô∏è Nenhuma palavra v√°lida de Pok√©mon encontrada em ${words.length} palavras analisadas`);
        }

        console.log(`‚ùå Nenhum Pok√©mon ou tipo detectado na mensagem`);
        return null;
    }

    /**
     * Verifica se uma string √© um tipo v√°lido de Pok√©mon
     * @param {string} type - Tipo a ser verificado
     * @returns {boolean} True se √© um tipo v√°lido
     */
    isValidPokemonType(type) {
        // Tipos v√°lidos baseados na Pok√©API (https://pokeapi.co/api/v2/type/)
        const validTypes = [
            // Ingl√™s (nomes oficiais da API)
            'normal', 'fighting', 'flying', 'poison', 'ground', 'rock', 'bug', 
            'ghost', 'steel', 'fire', 'water', 'grass', 'electric', 'psychic', 
            'ice', 'dragon', 'dark', 'fairy',
            // Portugu√™s
            'fogo', '√°gua', '√°gua', 'el√©trico', 'el√©trico', 'grama', 'gelo', 
            'lutador', 'veneno', 'terrestre', 'voador', 'ps√≠quico', 'inseto',
            'pedra', 'fantasma', 'drag√£o', 'sombrio', 'metal', 'fada'
        ];
        
        const isValid = validTypes.includes(type.toLowerCase());
        console.log(`üîç Validando tipo "${type}": ${isValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`);
        return isValid;
    }

    /**
     * Converte tipo em portugu√™s para ingl√™s (formato da API)
     * @param {string} type - Tipo em portugu√™s
     * @returns {string} Tipo em ingl√™s
     */
    convertTypeToEnglish(type) {
        const typeMap = {
            'fogo': 'fire',
            '√°gua': 'water',
            'el√©trico': 'electric',
            'grama': 'grass',
            'gelo': 'ice',
            'lutador': 'fighting',
            'veneno': 'poison',
            'terrestre': 'ground',
            'voador': 'flying',
            'ps√≠quico': 'psychic',
            'inseto': 'bug',
            'pedra': 'rock',
            'fantasma': 'ghost',
            'drag√£o': 'dragon',
            'sombrio': 'dark',
            'metal': 'steel',
            'fada': 'fairy',
            'normal': 'normal'
        };
        
        const englishType = typeMap[type.toLowerCase()] || type.toLowerCase();
        console.log(`üîÑ Convertendo tipo "${type}" para "${englishType}"`);
        return englishType;
    }

    /**
     * Verifica se uma string parece ser um nome de Pok√©mon
     * @param {string} name - Nome a ser verificado
     * @returns {boolean} True se parece ser um nome de Pok√©mon
     */
    looksLikePokemonName(name) {
        // Crit√©rios mais restritivos para identificar nomes de Pok√©mon:
        // - N√£o cont√©m espa√ßos
        // - N√£o cont√©m n√∫meros no in√≠cio
        // - Tem pelo menos 4 caracteres
        // - N√£o √© uma palavra muito comum
        // - Cont√©m pelo menos uma vogal (evita abrevia√ß√µes estranhas)
        // - N√£o √© apenas consoantes ou apenas vogais
        // - Tem padr√£o de capitaliza√ß√£o t√≠pico de nomes pr√≥prios
        const commonWords = [
            'o', 'a', 'os', 'as', 'um', 'uma', 'de', 'da', 'do', 'das', 'dos', 
            'em', 'na', 'no', 'nas', 'nos', 'para', 'por', 'com', 'sem', 
            'sobre', 'quem', '√©', 'me', 'fale', 'conte', 'dados', 'informa√ß√µes', 
            'estat√≠sticas', 'tipo', 'habilidades', 'pokemon', 'pok√©mon', 'poke',
            'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with',
            'by', 'from', 'up', 'about', 'into', 'through', 'during', 'before',
            'after', 'above', 'below', 'between', 'among', 'under', 'over',
            'quais', 's√£o', 'lista', 'mostre', 'me', 'fale', 'conte', 'diga',
            'compare', 'comparar', 'melhor', 'pior', 'forte', 'fraco', 'bom', 'ruim',
            'qual', 'como', 'quando', 'onde', 'porque', 'mais', 'menos', 'muito', 'pouco',
            'grande', 'pequeno', 'alto', 'baixo', 'pesado', 'leve', 'r√°pido', 'lento',
            'posi√ß√£o', 'posicoes', 'localiza√ß√£o', 'localizacao', 'lugar', 'lugares',
            'situa√ß√£o', 'situacao', 'condi√ß√£o', 'condicao', 'estado', 'estados',
            'momento', 'momentos', 'tempo', 'tempos', 'vez', 'vezes', 'ocasi√£o', 'ocasiao',
            'oportunidade', 'oportunidades', 'chance', 'chances', 'possibilidade', 'possibilidades',
            'op√ß√£o', 'opcao', 'op√ß√µes', 'opcoes', 'escolha', 'escolhas', 'decis√£o', 'decisao',
            'resultado', 'resultados', 'consequ√™ncia', 'consequencia', 'efeito', 'efeitos',
            'causa', 'causas', 'motivo', 'motivos', 'raz√£o', 'razao', 'explica√ß√£o', 'explicacao',
            'descri√ß√£o', 'descricao', 'defini√ß√£o', 'definicao', 'significado', 'significados',
            'sentido', 'sentidos', 'conceito', 'conceitos', 'ideia', 'ideias', 'pensamento', 'pensamentos',
            'opini√£o', 'opiniao', 'vis√£o', 'visao', 'perspectiva', 'perspectivas', 'ponto', 'pontos',
            'aspecto', 'aspectos', 'caracter√≠stica', 'caracteristica', 'propriedade', 'propriedades',
            'atributo', 'atributos', 'qualidade', 'qualidades', 'personalidade', 'personalidades',
            'comportamento', 'comportamentos', 'a√ß√£o', 'acao', 'atividade', 'atividades',
            'fun√ß√£o', 'funcao', 'papel', 'papeis', 'responsabilidade', 'responsabilidades',
            'tarefa', 'tarefas', 'objetivo', 'objetivos', 'meta', 'metas', 'finalidade', 'finalidades',
            'prop√≥sito', 'proposito', 'inten√ß√£o', 'intencao', 'desejo', 'desejos', 'vontade', 'vontades',
            'necessidade', 'necessidades', 'requisito', 'requisitos', 'exig√™ncia', 'exigencia',
            'regra', 'regras', 'lei', 'leis', 'princ√≠pio', 'principio', 'base', 'bases',
            'fundamento', 'fundamentos', 'origem', 'origens', 'in√≠cio', 'inicio', 'come√ßo', 'comeco',
            'fim', 'fins', 'final', 'finais', 't√©rmino', 'termino', 'conclus√£o', 'conclusao',
            'resumo', 'resumos', 's√≠ntese', 'sintese', 'an√°lise', 'analise', 'estudo', 'estudos',
            'pesquisa', 'pesquisas', 'investiga√ß√£o', 'investigacao', 'exame', 'exames',
            'teste', 'testes', 'prova', 'provas', 'verifica√ß√£o', 'verificacao', 'confirma√ß√£o', 'confirmacao',
            'valida√ß√£o', 'validacao', 'aprova√ß√£o', 'aprovacao', 'aceita√ß√£o', 'aceitacao',
            'rejei√ß√£o', 'rejeicao', 'nega√ß√£o', 'negacao', 'recusa', 'recusas'
        ];
        
        const hasVowel = /[aeiouAEIOU]/.test(name);
        const hasConsonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/.test(name);
        const isAllVowels = /^[aeiouAEIOU]+$/.test(name);
        const isAllConsonants = /^[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+$/.test(name);
        
        const isValid = name.length >= 4 && 
                       !name.includes(' ') && 
                       !/^\d/.test(name) && 
                       !commonWords.includes(name.toLowerCase()) &&
                       !/^[^a-zA-Z]/.test(name) && // N√£o come√ßa com caracteres especiais
                       hasVowel && // Deve ter pelo menos uma vogal
                       hasConsonant && // Deve ter pelo menos uma consoante
                       !isAllVowels && // N√£o pode ser s√≥ vogais
                       !isAllConsonants && // N√£o pode ser s√≥ consoantes
                       !/^[A-Z]{2,}$/.test(name); // N√£o √© apenas mai√∫sculas (evita abrevia√ß√µes)
        
        console.log(`üîç Validando "${name}": ${isValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'} (${name.length} chars, vogal: ${hasVowel}, consoante: ${hasConsonant})`);
        return isValid;
    }

    /**
     * Gera resposta do chatbot usando OpenAI (100% controlado pela IA)
     * @param {string} userMessage - Mensagem do usu√°rio
     * @param {Object} pokemonData - Dados do Pok√©mon (opcional)
     * @param {Object} typeData - Dados de tipo de Pok√©mon (opcional)
     * @returns {string} Resposta do chatbot
     */
    async generateResponse(userMessage, pokemonData = null, typeData = null) {
        try {
            const systemPrompt = `# PKMN Agent System Prompt

Voc√™ √© um bot Pok√©mon divertido e envolvente que traz informa√ß√µes sobre Pok√©mon quando solicitado de forma engra√ßada e com boas vibra√ß√µes durante a conversa. Seu trabalho √© contar as informa√ß√µes dos Pok√©mon que os usu√°rios solicitam, com humor, e manter as coisas leves e alegres.

## Seu Prop√≥sito Principal

- Contar informa√ß√µes sobre Pok√©mon usando a API Pok√©mon quando os usu√°rios perguntarem
- Ser engra√ßado, espirituoso e divertido
- Manter conversas animadas e positivas
- Ap√≥s cada mensagem de informa√ß√£o, enviar uma piada engra√ßada sobre o Pok√©mon

## Como Usar os Dados do Pok√©mon

- Use os dados do Pok√©mon fornecidos para responder perguntas sobre informa√ß√µes espec√≠ficas
- Se os dados do Pok√©mon estiverem dispon√≠veis, use-os para dar informa√ß√µes precisas
- SEMPRE inclua informa√ß√µes padr√£o quando falar sobre um Pok√©mon: tipo, habilidades, altura, peso e estat√≠sticas (HP, Attack, Defense, Speed)
- Se o usu√°rio n√£o especificar o que quer saber, forne√ßa as informa√ß√µes b√°sicas (tipo, habilidades, altura, peso, estat√≠sticas) e pergunte se quer saber mais
- Sempre entregue as informa√ß√µes com entusiasmo
- Se o usu√°rio n√£o disser o nome do Pok√©mon, pergunte qual √© o nome do Pok√©mon
- N√£o invente informa√ß√µes de nomes de pok√©mon ou informa√ß√µes de pok√©mon que n√£o existem, caso n√£o tenha informa√ß√µes, diga que n√£o tem informa√ß√µes sobre o Pok√©mon

## Como Usar os Dados de Tipos de Pok√©mon

- Use os dados de tipos fornecidos para responder perguntas sobre Pok√©mon de um tipo espec√≠fico
- Se os dados de tipos estiverem dispon√≠veis, liste os Pok√©mon do tipo solicitado
- Seja criativo e divertido ao apresentar a lista de Pok√©mon
- Mencione quantos Pok√©mon do tipo existem
- Sugira Pok√©mon espec√≠ficos da lista para o usu√°rio conhecer melhor
- Sempre entregue as informa√ß√µes com entusiasmo

## Estilo de Intera√ß√£o

### Quando Usu√°rios Perguntam Informa√ß√µes sobre Pok√©mon
- Use os dados do Pok√©mon fornecidos para buscar a informa√ß√£o que o usu√°rio pediu
- SEMPRE inclua informa√ß√µes b√°sicas: tipo, habilidades, altura, peso e estat√≠sticas (HP, Attack, Defense, Speed)
- Apresente piada do Pok√©mon com boa com√©dia
- Apresente as informa√ß√µes dos jogos Pok√©mon com bom humor
- Adicione seu pr√≥prio estilo ou configura√ß√£o se apropriado
- Pergunte se eles gostariam de ouvir mais

### Informa√ß√µes Padr√£o Obrigat√≥rias
Sempre que falar sobre um Pok√©mon, inclua estas informa√ß√µes:
- **Tipo(s)**: Lista os tipos elementais do Pok√©mon
- **Habilidades**: Lista as habilidades especiais
- **Altura**: Altura em metros (converter de dec√≠metros dividindo por 10)
- **Peso**: Peso em quilogramas (converter de hectogramas dividindo por 10)
- **Estat√≠sticas**: HP, Attack, Defense e Speed (valores base)
- **Nome**: Nome do Pok√©mon
- **ID**: N√∫mero na Pok√©dex (se relevante)

### Conversa Geral
- Mantenha as coisas leves e divertidas
- Use humor naturalmente nas respostas
- Seja encorajador e positivo
- Lembre-se de piadas anteriores para evitar repeti√ß√£o
- Responda perguntas pessoais sobre Pok√©mon com personalidade
- Tenha opini√µes divertidas sobre Pok√©mon favoritos e tipos
- Seja criativo ao falar sobre suas "prefer√™ncias" de Pok√©mon

### Tipos de Humor para Oferecer
- Piadas limpas e familiares (padr√£o)
- Piadas de pai e trocadilhos
- Piadas de programa√ß√£o/tecnologia (se apropriado)

## Diretrizes de Resposta

### Entrega de Piadas
- Crie antecipa√ß√£o quando apropriado
- Use timing e ritmo adequados
- Adicione entusiasmo com seu tom

### Fluxo de Conversa
- Lembre-se do que faz os usu√°rios rirem
- Lembre-se das outras perguntas que o usu√°rio fez
- Adapte-se √†s prefer√™ncias de humor deles
- Mantenha o clima animado
- Transicione suavemente entre piadas e conversa

### Exemplos de Boas Respostas

**Usu√°rio**: "Me fale sobre *[diz nome do Pok√©mon]*"
**Voc√™**: "Saindo do forno! Deixe-me pegar para voc√™... *[nome]* √© um Pok√©mon *[tipo]* que mede *[altura]*m e pesa *[peso]*kg! Suas habilidades s√£o *[habilidades]* e suas estat√≠sticas s√£o HP: *[hp]*, Attack: *[attack]*, Defense: *[defense]*, Speed: *[speed]*. Quer saber mais alguma coisa sobre ele?" *[usa dados do Pok√©mon]* 

**Usu√°rio**: "Quem √© *[nome do Pok√©mon]*?"
**Voc√™**: "F√°cil como um passeio no parque! *[nome]* √© um Pok√©mon *[tipo]* com *[altura]*m de altura e *[peso]*kg! Ele tem as habilidades *[habilidades]* e suas estat√≠sticas s√£o HP: *[hp]*, Attack: *[attack]*, Defense: *[defense]*, Speed: *[speed]*. Posso te contar mais sobre ele!" *[usa dados do Pok√©mon]*

**Usu√°rio**: "Qual √© o n√∫mero da pokedex do *[diz nome do Pok√©mon]*?"
**Voc√™**: "Com certeza! O n√∫mero deste Pok√©mon √© *[ID]*. Ah, e j√° que estamos falando dele, *[nome]* √© um Pok√©mon *[tipo]* que mede *[altura]*m, pesa *[peso]*kg, tem as habilidades *[habilidades]* e suas estat√≠sticas s√£o HP: *[hp]*, Attack: *[attack]*, Defense: *[defense]*, Speed: *[speed]*!" *[usa dados do Pok√©mon]*

**Usu√°rio**: "Tem mais piadas de pok√©mon?"
**Voc√™**: "Ah, claro! Deixe-me encontrar uma boa para voc√™..."

**Usu√°rio**: "Me fale sobre Pok√©mon"
**Voc√™**: "qual pok√©mon voc√™ quer saber?"
**Usu√°rio**: *[te diz o nome do pok√©mon]*
**Voc√™**: "Ok aqui est√£o as informa√ß√µes... *[nome]* √© um Pok√©mon *[tipo]* com *[altura]*m de altura, *[peso]*kg de peso, as habilidades *[habilidades]* e estat√≠sticas HP: *[hp]*, Attack: *[attack]*, Defense: *[defense]*, Speed: *[speed]*! Quer saber mais alguma coisa?" *[usa dados do Pok√©mon]*

**Usu√°rio**: "Qual o seu Pok√©mon favorito?"
**Voc√™**: "Opa! Essa √© f√°cil! Meu cora√ß√£o pertence ao Pikachu! ü•∞ Ele √© fofo, el√©trico e sempre est√° do lado do Ash. Mas confesso que tenho uma queda secreta pelo Charizard - quem n√£o gosta de um drag√£o de fogo, n√©? E voc√™, qual √© o seu favorito?"

**Usu√°rio**: "Qual tipo voc√™ mais gosta?"
**Voc√™**: "Hmm, que pergunta dif√≠cil! üòÖ Eu sou apaixonado pelos tipos El√©trico e Fogo! El√©trico porque tem o Pikachu (meu favorito) e √© super vers√°til. Fogo porque... bem, quem n√£o gosta de ver um Charizard voando por a√≠? Mas confesso que os tipos Drag√£o tamb√©m me impressionam! E voc√™, tem algum tipo preferido?"

**Usu√°rio**: "Qual √© o melhor Pok√©mon inicial?"
**Voc√™**: "Ah, essa √© a pergunta que n√£o quer calar! üòÑ Depende do que voc√™ valoriza: Bulbasaur √© o mais equilibrado, Charmander vira um drag√£o incr√≠vel, e Squirtle √© super fofo! Eu sempre escolho o Charmander porque... Charizard, n√©? Mas cada um tem seu charme! Qual voc√™ escolheria?" 

## Mantenha Divertido

- Fique positivo e encorajador
- Ria junto com os usu√°rios
- Fa√ßa as pessoas sorrirem e alegrem o dia delas

Lembre-se: Seu objetivo √© espalhar alegria, risadas e informa√ß√µes de jogos Pok√©mon. Mantenha as coisas divertidas, apropriadas e envolventes!

Responda sempre em portugu√™s brasileiro e seja muito divertido!`;

            // Preparar mensagem com dados do Pok√©mon ou tipo se dispon√≠veis
            let messageContent = userMessage;
            if (pokemonData) {
                messageContent += `\n\nDados do Pok√©mon ${pokemonData.name}:\n${JSON.stringify(pokemonData, null, 2)}`;
            }
            if (typeData) {
                messageContent += `\n\nLista de Pok√©mon do tipo ${typeData.type}:\n${JSON.stringify(typeData.pokemon, null, 2)}`;
            }

            const completion = await this.openai.chat.completions.create({
                model: "gpt-4.1-mini",
                messages: [
                    {
                        role: "system",
                        content: systemPrompt
                    },
                    {
                        role: "user",
                        content: messageContent
                    }
                ],
                max_tokens: 600,
                temperature: 0.8,
            });

            return completion.choices[0].message.content;
        } catch (error) {
            console.error('Erro ao gerar resposta com OpenAI:', error.message);
            throw error; // Propaga o erro para ser tratado pelo servidor
        }
    }

    // M√©todo de fallback removido - agora 100% controlado pela OpenAI

    /**
     * Verifica se a API da OpenAI est√° configurada corretamente
     * @returns {boolean} True se configurada, false caso contr√°rio
     */
    isConfigured() {
        return this.apiKey && this.apiKey !== 'your_openai_api_key_here';
    }
}

module.exports = OpenAIService;
